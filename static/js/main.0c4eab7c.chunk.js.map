{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","class","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0c4eab7c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n                  <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props. aboutText}</a>\r\n        </li>\r\n      \r\n       \r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n      \r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string,\r\naboutText:PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps={\r\n    title:'Set title here',\r\n    aboutText:'About text here'\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    };\r\n\r\n    const handleLoClick = () => {\r\n        console.log(\"lowercase was cliked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n    };\r\n\r\n    const handleClear = () => {\r\n        console.log(\"Clear text\");\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\");\r\n\r\n    };\r\n\r\n    const handleCopy=()=>{\r\n        console.log(\"copy to clipboard\");\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0,9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard\",\"success\");\r\n    }\r\n\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces  removed\",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"On changed\");\r\n        setText(event.target.value);\r\n    };\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\" class=\"form-label\"></label>\r\n                    <textarea\r\n                        className=\"form-control\"\r\n                        value={text}\r\n                        onChange={handleOnChange}\r\n                        style={{backgroundColor:props.mode==='dark'?'gray':'white',color:props.mode==='dark'?'white':'#042743'}}\r\n                        id=\"myBox\"\r\n                        rows=\"12\"\r\n                    ></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n                    Convert to Uppercase\r\n                </button>\r\n                <button className=\"btn btn-primary mx-3 my-2 \" onClick={handleLoClick}>\r\n                    Convert to Lowercase\r\n                </button>\r\n\r\n                <button className=\"btn btn-primary mx-3 my-2 \" onClick={handleClear}>\r\n                    Clear text\r\n                </button>\r\n\r\n                <button className=\"btn btn-primary mx-3 my-2 \" onClick={handleCopy}>\r\n                    Copy Text\r\n                </button>\r\n\r\n                <button className=\"btn btn-primary mx-3 my-2 \" onClick={handleExtraSpaces}>\r\n                    Remove Extra Spaces\r\n                </button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>\r\n                    {text.split(\" \").length} words and {text.length} characters\r\n                </p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something to preview it\"}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        \r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\r\n              <strong>{capitalize(props.alert.type)}:{props.alert.msg}</strong>\r\n            </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');//whter dark mode is enabled or not\n  const [alert,setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n      setAlert({\n        msg:message,\n        type:type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1500 );\n  }\n\n  const toggleMode=()=>{\n    if(mode==='light')\n    {\n      setMode('dark')\n      document.body.style.backgroundColor='#042743'\n      showAlert(\"Dark mode has been enabled\",\"success\")\n    }\n    else\n    {\n      setMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert(\"Light mode has been enabled\",\"success\")\n    }\n  }\n  \n  \n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"Textutils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch>\n          <Route path=\"/about\">\n            <About/>\n          </Route>\n         \n          <Route path=\"/\"> */}\n    <Textform heading=\"Enter the text to analyse:\" mode={mode} showAlert={showAlert}/>\n            \n          {/* </Route>\n        </Switch> */}\n\n     {/* <About/>  */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}